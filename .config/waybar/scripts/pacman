#!/usr/bin/env python

import json
import os
import socket
import sys
from contextlib import contextmanager
from time import sleep

SERVER_PATH = f"{os.environ['XDG_RUNTIME_DIR']}/update-notifier-db/notifier.socket"


def log(*args):
    print(*args, file=sys.stderr)


@contextmanager
def connection():
    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as sock:
        sock.connect(SERVER_PATH)
        log("connected to server")
        yield sock


def readlines(sock):
    data = ""
    while True:
        new_data = sock.recv(1024).decode()
        if len(new_data) == 0:
            raise StopIteration("connection to server closed")

        data += new_data
        while "\n" in data:
            line, data = data.split("\n", 1)
            yield line

def write_to_waybar(pending_updates):
    print(
        json.dumps(
            {
                "text": f"{len(pending_updates)}" if len(pending_updates) else "",
                "tooltip": "\n".join(f"- {p}" for p in pending_updates)
                if len(pending_updates)
                else "No pending updates",
            }
        ),
        flush=True,
    )

def run():
    backoff = 0

    while True:
        try:
            with connection() as sock:
                backoff = 0
                for line in readlines(sock):
                    log(f"pending arch updates: {line}")
                    write_to_waybar(json.loads(line))

        except (ConnectionRefusedError, FileNotFoundError):
            backoff = min(backoff + 3, 10 * 60)
            log(f"Can't connect to arch update notifier, retrying in {backoff} seconds")
            sleep(backoff)


if __name__ == "__main__":
    run()
